{"version":3,"sources":["components/sub-component/postCard/FeedCard.js","components/pages/dynamicPages/WallPostFeed/SavedFeedPostPage.js"],"names":["dropdownOptions","key","text","icon","fetchFeedCommentObj","fetchFeedLikeObj","defaultObj","isLoader","isLikeLoader","commentLoader","totalCommentCount","userCommentData","commentInput","commentValue","commentReplyValue","likeCount","isLike","likeData","isFollow","followLabel","isSaved","commentSubReplyValue","FeedCard","_ref","avatar","item","user","postTime","_ref$mediaUrls","mediaUrls","commentCount","shareCount","_useState","useState","_useState2","_slicedToArray","state","setState","_useState3","_useState4","setOpen","loggedUser","getUser","userId","_id","useEffect","_isFollowLabel","pre","_objectSpread","isSave","er","console","log","callEffect","fetchFeeComment","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","_feedObjData","_yield$POST3","status","totalPages","message","payload","feedObjData","wrap","_context3","prev","next","showCommentInput","feedId","id","pageNumber","POST","sent","abrupt","length","push","apply","_toConsumableArray","t0","stop","_callee4","_feedObjData2","_yield$POST4","_context4","setTimeout","likeDisLikeBtn","_ref9","_callee8","_isLike","_likeCount","_context8","parseInt","PATCH","action","arguments","fetchUserLikeList","_callee9","_yield$POST6","_context9","followUserBtn","_callee10","_feedLikeData","_yield$POST7","feedLikeData","_context10","_ref12","_callee11","isStatus","followObj","_yield$POST8","_context11","statusType","saveRemoveFeedBtn","_ref13","_callee12","saveDelObj","_yield$POST9","_context12","deletedCount","_jsx","_Fragment","children","_jsxs","Card","color","fluid","Content","className","Feed","Event","Label","Image","src","Icon","name","circular","Summary","first_name","Meta","Date","content","concat","moment","fromNow","Extra","Button","basic","compact","onClick","link","fitted","Dropdown","direction","as","Menu","map","option","Item","value","Description","style","paddingTop","paddingBottom","background","Carousel","infiniteLoop","useKeyboardArrows","autoPlay","showThumbs","showIndicators","mItem","index","thumbUrl","isVideo","mp4","search","mov","avi","React","Fragment","centered","ReactPlayer","playing","light","url","controls","Assets","defaultPlaceholders","waterMarkSq","img","alt","height","Header","Like","fetchObj","feedRecord","totalPage","totalRecord","hashMore","totalRecords","SaveFeedPostPage","fetchFeedData","err","_callee","_yield$POST","_context","Container","Grid","stackable","Column","mobile","tablet","computer","widescreen","size","Divider","_","times","pageLimit","i","Placeholder","image","Line","Paragraph","rectangular","NoData","InfiniteScroll","dataLength","padding","hasMore","endMessage","textAlign","loader","makeUserProfileImgURL","user_info","profile_pic","createdAt"],"mappings":"sbAWMA,EAAkB,CACtB,CAAEC,IAAK,IAAKC,KAAM,QAASC,KAAM,mBACjC,CAAEF,IAAK,IAAKC,KAAM,SAAUC,KAAM,gBAClC,CAAEF,IAAK,IAAKC,KAAM,QAASC,KAAM,SAG/BC,EAAsB,CACxB,OAAU,GACV,OAAU,GACV,WAAc,EACd,UAAa,GACb,SAAY,IAGVC,EAAmB,CACrB,OAAU,GACV,OAAU,GACV,WAAc,EACd,UAAa,IAGXC,EAAa,CACfC,UAAU,EACVC,cAAc,EACdC,eAAe,EACfC,kBAAmB,EACnBC,gBAAiB,GACjBC,cAAc,EACdC,aAAc,GACdC,kBAAmB,GACnBC,UAAW,EACXC,OAAQ,EACRC,SAAU,GACVC,SAAU,EACVC,YAAa,SACbC,QAAS,EACTC,qBAAsB,IA8hBTC,EA1hBE,SAAHC,GAA+F,IAAzFC,EAAMD,EAANC,OAAQC,EAAIF,EAAJE,KAAMC,EAAIH,EAAJG,KAAMC,EAAQJ,EAARI,SAAQC,EAAAL,EAAEM,iBAAS,IAAAD,EAAG,GAAEA,EAAEb,EAASQ,EAATR,UAAWe,EAAYP,EAAZO,aAAcC,EAAUR,EAAVQ,WACzFC,EAA0BC,mBAAS3B,GAAW4B,EAAAC,YAAAH,EAAA,GAAvCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAAwBL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA1BE,GAAFD,EAAA,GAASA,EAAA,IAEhBE,EAAaC,cACjBtC,EAAoBuC,OAASF,EAAWG,IACxCvC,EAAiBsC,OAASF,EAAWG,IAErCC,qBAAU,YACR,WACE,IACE,IAAIC,EAAmC,IAAlBrB,EAAKP,SAAiB,SAAW,WACtDmB,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE/B,OAAQS,EAAKT,OAAQD,UAAWA,EAAWI,YAAa2B,EAAgB1B,QAASK,EAAKwB,YACnH,MAAOC,GAAMC,QAAQC,IAAIF,IAC1BG,KACF,CAACtC,IAEJ,IAkHMuC,EAAkBC,sBAAWC,YAAAC,IAAAC,MAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,IAAAU,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAMgB,OANhBF,EAAAC,KAAA,EAEhCE,IACAnE,EAAoBoE,OAAS/C,EAAKgD,GAClCrE,EAAoBsE,WAAa,EAEjCrC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OAAS6D,EAAAE,KAAA,EACKK,YAAK,+BAAgCvE,GAAqB,KAAD,EAC7D,GAD6DyD,EAAAO,EAAAQ,KAAxGd,EAAMD,EAANC,OAAQC,EAAUF,EAAVE,WAAYC,EAAOH,EAAPG,QAASC,EAAOJ,EAAPI,QACnC5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OACxB,IAAXuD,EAAY,CAAAM,EAAAE,KAAA,gBAAAF,EAAAS,OAAA,SAAW1B,QAAQC,IAAI,mBAAoBY,IAAQ,SAC/DE,EAAc,IACFY,OAAS,MAAOZ,EAAc,KAC9CN,EAAAM,GAAYa,KAAIC,MAAApB,EAAAqB,YAAIhB,IACpB5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GACRD,GAAG,IACNrC,kBAAmBqD,EACnBpD,gBAAiBuD,OACfE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAc,GAAAd,EAAA,SACSjB,QAAQC,IAAGgB,EAAAc,IAAK,QAAG,yBAAAd,EAAAe,UAAAxB,EAAA,oBAwC9BY,GArCuBhB,sBAAWC,YAAAC,IAAAC,MAAC,SAAA0B,IAAA,IAAAC,EAAAC,EAAAxB,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAT,IAAAU,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAGD,OAHCiB,EAAAlB,KAAA,EAErChC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OACvCH,EAAoBsE,YAAc,EAAEa,EAAAjB,KAAA,EACiBK,YAAK,+BAAgCvE,GAAqB,KAAD,EAC7D,GAD6DkF,EAAAC,EAAAX,KAAxGd,EAAMwB,EAANxB,OAAQC,EAAUuB,EAAVvB,WAAYC,EAAOsB,EAAPtB,QAASC,EAAOqB,EAAPrB,QACnC5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OACxB,IAAXuD,EAAY,CAAAyB,EAAAjB,KAAA,gBAAAiB,EAAAV,OAAA,SAAW1B,QAAQC,IAAI,wBAAyBY,IAAQ,SACpEE,EAAc9B,EAAMzB,iBAAmB,IAC3BmE,OAAS,MAAOZ,EAAc,KAC9CmB,EAAAnB,GAAYa,KAAIC,MAAAK,EAAAJ,YAAIhB,IACpBuB,YAAW,WACTnD,GAAS,SAACU,GAAG,OAAAC,wBAAA,GACRD,GAAG,IACNrC,kBAAmBqD,EACnBpD,gBAAiBuD,SAElB,GAAGqB,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAL,GAAAK,EAAA,SACOpC,QAAQC,IAAGmC,EAAAL,IAAK,QAAG,yBAAAK,EAAAJ,UAAAC,EAAA,oBAoBX,WACvB,IACEI,YAAW,WACTnD,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAEnC,cAAc,SAC1C,IACH,MAAOsC,GAAMC,QAAQC,IAAIF,MA4BvBuC,EAAc,eAAAC,EAAAlC,YAAAC,IAAAC,MAAG,SAAAiC,IAAA,IAAAC,EAAAC,EAAA,OAAApC,IAAAU,MAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,OASqD,OATrDwB,EAAAzB,KAAA,EAEfuB,EAAU,EAAGC,EAAaE,SAAS3D,EAAMrB,WACxB,IAAjBqB,EAAMpB,OACR6E,GAAc,GAEdD,EAAU,EACVC,GAAc,GAEhBxD,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE/B,OAAQ4E,EAAS7E,UAAW8E,OAAeC,EAAAxB,KAAA,EAClE0B,YAAM,0BAA2BvE,EAAKgD,GAAI,CAAEwB,OAAQL,EAASjD,OAAQF,EAAWG,MAAO,KAAD,EAAAkD,EAAAxB,KAAA,gBAAAwB,EAAAzB,KAAA,EAAAyB,EAAAZ,GAAAY,EAAA,SAC/E3C,QAAQC,IAAG0C,EAAAZ,IAAK,QAAG,yBAAAY,EAAAX,UAAAQ,EAAA,kBACnC,kBAZmB,OAAAD,EAAAV,MAAA,KAAAkB,YAAA,GAcdC,EAAoB5C,sBAAWC,YAAAC,IAAAC,MAAC,SAAA0C,IAAA,IAAAC,EAAAvC,EAAAE,EAAAC,EAAA,OAAAR,IAAAU,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OAGF,OAHEgC,EAAAjC,KAAA,EAElChE,EAAiBmE,OAAa,OAAJ/C,QAAI,IAAJA,OAAI,EAAJA,EAAMgD,GAChCpE,EAAiBqE,WAAa,EAAE4B,EAAAhC,KAAA,EACSK,YAAK,6BAA8BtE,GAAkB,KAAD,EAA/D,GAA+DgG,EAAAC,EAAA1B,KAAvFd,EAAMuC,EAANvC,OAAQE,EAAOqC,EAAPrC,QAASC,EAAOoC,EAAPpC,QACR,IAAXH,EAAY,CAAAwC,EAAAhC,KAAA,gBAAAgC,EAAAzB,OAAA,SAAW1B,QAAQC,IAAIY,IAAQ,QAC/C3B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE9B,SAAUgD,OACvCzB,GAAQ,GAAM8D,EAAAhC,KAAA,iBAAAgC,EAAAjC,KAAA,GAAAiC,EAAApB,GAAAoB,EAAA,SACDnD,QAAQC,IAAGkD,EAAApB,IAAK,QAAG,yBAAAoB,EAAAnB,UAAAiB,EAAA,oBAkB9BG,GAfwBhD,sBAAWC,YAAAC,IAAAC,MAAC,SAAA8C,IAAA,IAAAC,EAAAC,EAAA5C,EAAAE,EAAAC,EAAA0C,EAAA,OAAAlD,IAAAU,MAAA,SAAAyC,GAAA,cAAAA,EAAAvC,KAAAuC,EAAAtC,MAAA,OAGL,OAHKsC,EAAAvC,KAAA,EAEtChC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAEvC,cAAc,OAC3CH,EAAiBqE,YAAc,EAAEkC,EAAAtC,KAAA,EACQK,YAAK,6BAA8BtE,GAAkB,KAAD,EACxC,GADwCqG,EAAAE,EAAAhC,KAAvFd,EAAM4C,EAAN5C,OAAQE,EAAO0C,EAAP1C,QAASC,EAAOyC,EAAPzC,QACvB5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAEvC,cAAc,OAC5B,IAAXsD,EAAY,CAAA8C,EAAAtC,KAAA,gBAAAsC,EAAA/B,OAAA,SAAW1B,QAAQC,IAAI,6BAA8BY,IAAQ,SACzE2C,EAAevE,EAAMnB,UAAY,IACpB6D,OAAS,MAAO6B,EAAe,KAChDF,EAAAE,GAAa5B,KAAIC,MAAAyB,EAAAxB,YAAIhB,IACrB5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE9B,SAAU0F,OAAiBC,EAAAtC,KAAA,iBAAAsC,EAAAvC,KAAA,GAAAuC,EAAA1B,GAAA0B,EAAA,SAC3CzD,QAAQC,IAAGwD,EAAA1B,IAAK,QAAG,yBAAA0B,EAAAzB,UAAAqB,EAAA,oBAIjB,eAAAK,EAAArD,YAAAC,IAAAC,MAAG,SAAAoD,IAAA,IAAAC,EAAAC,EAAAC,EAAAnD,EAAAG,EAAA,OAAAR,IAAAU,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OAUjB,OAViB4C,EAAA7C,KAAA,EAEd0C,EAAW,EACW,WAAtB3E,EAAMjB,cACR4F,EAAW,GAETC,EAAY,CACd,OAAUvE,EAAWG,IACrB,eAAkBlB,EAAK+C,GACvB,OAAUsC,GACXG,EAAA5C,KAAA,EACiCK,YAAK,6BAA8BqC,GAAW,KAAD,EAAxD,GAAwDC,EAAAC,EAAAtC,KAAvEd,EAAMmD,EAANnD,OAAQG,EAAOgD,EAAPhD,QACD,IAAXH,EAAY,CAAAoD,EAAA5C,KAAA,gBAAA4C,EAAArC,OAAA,kBAChBxC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE7B,SAAU,EAAGC,YAAa8C,EAAQkD,gBAAeD,EAAA5C,KAAA,iBAAA4C,EAAA7C,KAAA,GAAA6C,EAAAhC,GAAAgC,EAAA,SACjE/D,QAAQC,IAAG8D,EAAAhC,IAAK,QAAG,yBAAAgC,EAAA/B,UAAA2B,EAAA,mBACnC,kBAfkB,OAAAD,EAAA7B,MAAA,KAAAkB,YAAA,IAiBbkB,EAAiB,eAAAC,EAAA7D,YAAAC,IAAAC,MAAG,SAAA4D,IAAA,IAAArE,EAAAsE,EAAAC,EAAA1D,EAAA,OAAAL,IAAAU,MAAA,SAAAsD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,OAMrB,OANqBmD,EAAApD,KAAA,EAElBpB,EAA2B,IAAlBb,EAAMhB,QAAgB,EAAI,EACjCmG,EAAa,CACjB,OAAU9E,EAAWG,IACrB,OAAUnB,EAAKgD,IAChBgD,EAAAnD,KAAA,EACiCK,YAAK,uBAAwB4C,GAAY,KAAD,EAC1B,GAD0BC,EAAAC,EAAA7C,KAAlEd,EAAM0D,EAAN1D,OACqB,IADN0D,EAAPvD,QACJyD,eAAsBzE,EAAS,GAC5B,IAAXa,EAAY,CAAA2D,EAAAnD,KAAA,gBAAAmD,EAAA5C,OAAA,kBAChBxC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE3B,QAAS6B,OAAWwE,EAAAnD,KAAA,iBAAAmD,EAAApD,KAAA,GAAAoD,EAAAvC,GAAAuC,EAAA,SACpCtE,QAAQC,IAAGqE,EAAAvC,IAAK,QAAG,yBAAAuC,EAAAtC,UAAAmC,EAAA,mBACnC,kBAZsB,OAAAD,EAAArC,MAAA,KAAAkB,YAAA,GAcvB,OACEyB,cAAAC,WAAA,CAAAC,SACEC,eAACC,IAAI,CAACC,MAAM,OAAOC,OAAK,EAAAJ,SAAA,CACtBC,eAACC,IAAKG,QAAO,CAACC,UAAU,mBAAkBN,SAAA,CACxCF,cAACS,IAAI,CAAAP,SACHC,eAACM,IAAKC,MAAK,CAAAR,SAAA,CACTF,cAACS,IAAKE,MAAK,CAAAT,SACRrG,EAASmG,cAACY,IAAK,CAACC,IAAKhH,IAAamG,cAACc,IAAI,CAACC,KAAK,OAAOC,UAAQ,EAACX,MAAM,WAEtEF,eAACM,IAAKF,QAAO,CAACC,UAAU,aAAYN,SAAA,CAClCF,cAACS,IAAKQ,QAAO,CAAAf,SAACF,cAAA,KAAAE,SAAInG,EAAKmH,WAAanH,EAAKmH,WAAa,mBACtDlB,cAACS,IAAKU,KAAI,CAAAjB,SACPlG,EAAWgG,cAACS,IAAKW,KAAI,CAACC,QAAO,GAAAC,OAAKC,IAAO,IAAIH,KAAKpH,IAAWwH,aAAkB,QAGpFxB,cAACS,IAAKgB,MAAK,CAAAvB,SACRnG,EAAK+C,KAAOhC,EAAWG,IACtBkF,eAAAF,WAAA,CAAAC,SAAA,CACEC,eAACuB,IAAM,CAACrB,MAAM,OAAOsB,OAAK,EAACX,UAAQ,EAACY,SAAO,EAACC,QAAS,kBAAMjD,KAAgBsB,SAAA,CACzEF,cAACc,IAAI,CAACC,KAA4B,WAAtBtG,EAAMjB,YAA2B,WAAa,gBAAiB,MAAIiB,EAAMjB,eAC9E,OACTwG,cAACc,IAAI,CAACgB,MAAI,EAACf,KAAwB,IAAlBtG,EAAMhB,QAAgB,mBAAqB,WAC1DuH,UAAQ,EAACX,MAAM,OAAO0B,QAAM,EAACF,QAAS,kBAAMpC,OAC5C,OACFO,cAACgC,IAAQ,CAACxJ,KAAK,oBAAoByJ,UAAU,OAAOC,GAAG,KAAK1B,UAAU,gBAAeN,SACnFF,cAACgC,IAASG,KAAI,CAAAjC,UACV7H,GAAmB,IAAI+J,KAAI,SAACC,GAAM,OAClCrC,cAACgC,IAASM,KAAIjH,YAAA,GAAuBgH,GAAjBA,EAAOE,iBAIjC,YAIVvC,cAACI,IAAKoC,YAAW,CAACC,MAAO,CAAEC,WAAY,MAAOC,cAAe,OAAQzC,SAAEpG,EAAKwC,aAE9E6D,eAAA,OAAKsC,MAAO,CAAEG,WAAY,QAAS1C,SAAA,CAAC,WAAShG,EAAUiD,OAAS,EAAI6C,cAAC6C,WAAQ,CAC3EC,cAAY,EACZC,mBAAiB,EACjBC,UAAQ,EACRC,YAAY,EACZC,gBAAgB,EAChB1C,UAAU,qBAAoBN,UAE5BhG,GAAa,IAAIkI,KAAI,SAACe,EAAOC,GAC7B,IAAIvC,EAAMsC,EAAMtC,IAAMsC,EAAMtC,IAAMsC,EAC9BE,EAAWF,EAAME,SAAWF,EAAME,SAAWF,EAC7CG,GAAU,EACVC,EAAM1C,EAAI2C,OAAO,QAASC,EAAM5C,EAAI2C,OAAO,QAASE,EAAM7C,EAAI2C,OAAO,QAGzE,OADID,EAAM,GAAKE,EAAM,GAAKC,EAAM,KAAKJ,GAAU,GACxCtD,cAAC2D,IAAMC,SAAQ,CAAA1D,UACP,IAAZoD,EACCtD,cAAA,OAAKQ,UAAU,iBAAgBN,SAC7BF,cAACY,IAAK,CAACC,IAAKA,EAAKgD,UAAQ,EAACrD,UAAU,wBAGtCR,cAAA,OAAKQ,UAAU,eAAcN,SAC3BF,cAAC8D,IAAW,CACVC,SAAS,EACTC,MAAOX,EACPY,IAAKpD,EACLqD,UAAU,OAXUd,QAiBlBpD,cAACY,IAAK,CAACC,IAAKsD,IAAOC,oBAAoBC,YAAYC,IAAKC,IAAKJ,IAAOC,oBAAoBC,YAAYE,IAAKV,UAAQ,EAACpB,MAAO,CAAE+B,OAAQ,cAGjJxE,cAACI,IAAKG,QAAO,CAACC,UAAU,mBAAkBN,SACxCC,eAAA,OAAKK,UAAU,wBAAuBN,SAAA,CACpCF,cAACyE,IAAM,CAACvC,GAAG,IAAGhC,SACZC,eAACM,IAAKiE,KAAI,CAAAxE,SAAA,CACRF,cAACI,IAAKG,QAAO,CAACsB,QAAS,kBAAM/D,KAAiBoC,SAC1B,IAAjBzF,EAAMpB,OAAe2G,cAACc,IAAI,CAACC,KAAK,gBAAgBgB,QAAM,IACnD/B,cAACc,IAAI,CAACC,KAAK,OAAOV,MAAM,MAAM0B,QAAM,MAE3B,QACf5B,eAACC,IAAKG,QAAO,CAACsB,QAAS,kBAAMrD,KAAoB0B,SAAA,CAAC,IAAEzF,EAAMrB,UAAW,IAC7C,IAApBqB,EAAMrB,WAAuC,IAApBqB,EAAMrB,UAAmB4G,cAAAC,WAAA,CAAAC,SAAE,UAAWF,cAAAC,WAAA,CAAAC,SAAE,kBAKzEF,cAACyE,IAAM,CAACvC,GAAG,IAAGhC,SACZC,eAACM,IAAKiE,KAAI,CAAC7C,QAAS,kBAAMlG,KAAkBuE,SAAA,CAC1CC,eAACC,IAAKG,QAAO,CAAC2B,GAAG,IAAGhC,SAAA,CAClBF,cAACc,IAAI,CAACC,KAAK,kBAAkBgB,QAAM,IAAG,IAAE5H,KAC3B,IAAE,IACjB6F,cAAA,QAAAE,SAAM,iBAIVF,cAACyE,IAAM,CAACvC,GAAG,IAAGhC,SACZC,eAACM,IAAKiE,KAAI,CAAAxE,SAAA,CACRF,cAACc,IAAI,CAACC,KAAK,QAAQgB,QAAM,IAAG,IAAE3H,EAAW,yBClbrDuK,EAAW,CACb,OAAU,GACV,WAAc,EACd,UAAa,GACb,YAAe,GACf,YAAe,GACf,OAAU,GACV,KAAQ,GACR,SAAY,IAGRhM,EAAa,CACjBiM,WAAY,GACZC,UAAW,EACXC,YAAa,EACbC,UAAU,EACVC,aAAc,EACdpM,UAAU,GAkHGqM,UA/GU,WACvB,IAAA5K,EAA0BC,mBAAS3B,GAAW4B,EAAAC,YAAAH,EAAA,GAAvCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAClBO,EAAaC,cACjB4J,EAAS3J,OAASF,EAAWG,IAE7BC,qBAAU,WACR,IAEIgK,IAEF,MAAOC,GAAO3J,QAAQC,IAAI0J,MAC3B,IAEH,IAAMD,EAAgBtJ,sBAAWC,YAAAC,IAAAC,MAAC,SAAAqJ,IAAA,IAAAnJ,EAAAoJ,EAAAlJ,EAAAE,EAAA2I,EAAA1I,EAAAC,EAAA,OAAAT,IAAAU,MAAA,SAAA8I,GAAA,cAAAA,EAAA5I,KAAA4I,EAAA3I,MAAA,OAEkB,OAFlB2I,EAAA5I,KAAA,EAE9BhC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OAAS0M,EAAA3I,KAAA,EACOK,YAAK,6BAA8B2H,GAAU,KAAD,EACnD,GADmDU,EAAAC,EAAArI,KAA7Fd,EAAMkJ,EAANlJ,OAAQE,EAAOgJ,EAAPhJ,QAAS2I,EAAYK,EAAZL,aAAc1I,EAAO+I,EAAP/I,QACrC5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAExC,UAAU,OACzB,GAAVuD,EAAW,CAAAmJ,EAAA3I,KAAA,SAC0B,OAAvCnB,QAAQC,IAAI,iBAAkBY,GAASiJ,EAAApI,OAAA,SAChCxC,GAAS,SAACU,GAAG,OAAAC,wBAAA,GAAWD,GAAG,IAAE2J,UAAU,QAAS,QAEvC,GAClBxI,EAAc9B,EAAMmK,YACpB3I,EAAAM,GAAYa,KAAIC,MAAApB,EAAAqB,YAAIhB,IACpB5B,GAAS,SAACU,GAAG,OAAAC,wBAAA,GACRD,GAAG,IACNwJ,WAAYrI,EACZyI,aAAcA,OACZM,EAAA3I,KAAA,iBAAA2I,EAAA5I,KAAA,GAAA4I,EAAA/H,GAAA+H,EAAA,SACS9J,QAAQC,IAAG6J,EAAA/H,IAAK,QAAG,yBAAA+H,EAAA9H,UAAA4H,EAAA,oBAQpC,OACEpF,cAAAC,WAAA,CAAAC,SACEF,cAACuF,IAAS,CAAArF,SACRF,cAACwF,IAAI,CAAC3B,UAAQ,EAAC4B,WAAS,EAAAvF,SACtBC,eAACqF,IAAKE,OAAM,CAACC,OAAQ,GAAIC,OAAQ,EAAGC,SAAU,EAAGC,WAAY,EAAGtF,UAAU,GAAEN,SAAA,CAC1EC,eAACsE,IAAM,CAAChC,MAAO,CAAEC,WAAY,QAASxC,SAAA,CACpCF,cAACc,IAAI,CAACC,KAAK,WAAWV,MAAM,OAAO0F,KAAK,QAAQhE,QAAM,IAAG,+BAI3D/B,cAACgG,IAAO,IACqB,IAA5BvL,EAAMmK,WAAWzH,OAChB6C,cAAAC,WAAA,CAAAC,UACsB,IAAnBzF,EAAMsK,SACL/E,cAAAC,WAAA,CAAAC,SACG+F,IAAEC,MAAMvB,EAASwB,WAAW,SAACC,GAAC,OAC7BpG,cAACI,IAAI,CAASE,OAAK,EAAAJ,SACjBC,eAACC,IAAKG,QAAO,CAAAL,SAAA,CACXC,eAACkG,IAAW,CAAAnG,SAAA,CACVC,eAACkG,IAAY5B,OAAM,CAAC6B,OAAK,EAAApG,SAAA,CACvBF,cAACqG,IAAYE,KAAI,CAACpJ,OAAO,WACzB6C,cAACqG,IAAYE,KAAI,CAACpJ,OAAO,kBAE3BgD,eAACkG,IAAYG,UAAS,CAAAtG,SAAA,CACpBF,cAACqG,IAAYE,KAAI,IACjBvG,cAACqG,IAAYE,KAAI,UAGrBpG,eAACkG,IAAW,CAAC/F,OAAK,EAACmC,MAAO,CAAE+B,OAAQ,SAAUtE,SAAA,CAC5CF,cAACqG,IAAYzF,MAAK,CAAC6F,aAAW,IAC9BzG,cAACqG,IAAYE,KAAI,CAACpJ,OAAO,kBAdpBiJ,QAqBfpG,cAAC0G,IAAM,MAEL,KAER1G,cAAC2G,IAAc,CACbC,WAAYnM,EAAMmK,WAAWzH,OAC7BR,KAhDK,SAACyJ,GAChBzB,EAAS5H,WAAa4H,EAAS5H,WAAa,EAC5CmI,KA+CUzC,MAAO,CAAEoE,QAAS,OAClBC,QAASrM,EAAMsK,SACfgC,WAAY/G,cAAA,KAAGyC,MAAO,CAAEuE,UAAW,UAAW9G,SAACF,cAAA,KAAAE,SAAG,sBAClD+G,OAAQjH,cAAA,MAAIyC,MAAO,CAAEuE,UAAW,UAAW9G,SAAC,eAAgBA,UAE1DzF,EAAMmK,YAAc,IAAIxC,KAAI,SAACtI,EAAMsJ,GACnC,OACEpD,cAAC2D,IAAMC,SAAQ,CAAA1D,SACbF,cAACrG,EAAQ,CACPE,OAAQqN,YAAsBpN,EAAKqN,UAAUC,aAC7CtN,KAAMA,EACNC,KAAMD,EAAKqN,UAAYrN,EAAKqN,UAAY,GACxCnN,SAAUF,EAAKuN,UACfnN,UAAWJ,EAAKI,UAChBd,UAAWU,EAAKV,UAChBe,aAAcL,EAAKK,aACnBC,WAAYN,EAAKM,cATAgJ","file":"static/js/33.de0b6b17.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Carousel } from 'react-responsive-carousel';\nimport moment from \"moment\";\nimport { Image, Feed, Icon, Comment, Button, Card, Header, Dropdown, Modal, Segment, Input, Popup, Loader, List, } from \"semantic-ui-react\";\nimport ReactPlayer from 'react-player';\nimport \"./style.css\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { DELETE, PATCH, POST } from \"../../../Services\";\nimport { getUser, makeUserProfileImgURL } from \"../../../utils/common\";\nimport Assets from \"../../../assets/Assets.js\";\n\nconst dropdownOptions = [\n  { key: \"1\", text: \"Share\", icon: \"share alternate\" },\n  { key: \"3\", text: \"Report\", icon: \"warning sign\" },\n  { key: \"2\", text: \"Block\", icon: \"dont\" }\n];\n\nlet fetchFeedCommentObj = {\n  \"userId\": \"\",\n  \"feedId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10,\n  \"timeZone\": \"\"\n};\n\nlet fetchFeedLikeObj = {\n  \"userId\": \"\",\n  \"feedId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10\n};\n\nlet defaultObj = {\n  isLoader: false,\n  isLikeLoader: true,\n  commentLoader: false,\n  totalCommentCount: 0,\n  userCommentData: [],\n  commentInput: false,\n  commentValue: '',\n  commentReplyValue: '',\n  likeCount: 0,\n  isLike: 0,\n  likeData: [],\n  isFollow: 0,\n  followLabel: \"Follow\",\n  isSaved: 0,\n  commentSubReplyValue: ''\n};\n\n\nconst FeedCard = ({ avatar, item, user, postTime, mediaUrls = [], likeCount, commentCount, shareCount }) => {\n  const [state, setState] = useState(defaultObj);\n  const [open, setOpen] = useState(false);\n\n  let loggedUser = getUser();\n  fetchFeedCommentObj.userId = loggedUser._id;\n  fetchFeedLikeObj.userId = loggedUser._id;\n\n  useEffect(() => {\n    function callEffect() {\n      try {\n        let _isFollowLabel = item.isFollow === 0 ? \"Follow\" : \"Unfollow\"\n        setState((pre) => ({ ...pre, isLike: item.isLike, likeCount: likeCount, followLabel: _isFollowLabel, isSaved: item.isSave }));\n      } catch (er) { console.log(er); };\n    }; callEffect();\n  }, [likeCount])\n\n  const commentHandler = (e) => {\n    let value = e.target.value;\n    let name = e.target.name;\n    setState((pre) => ({\n      ...pre,\n      [name]: value\n    }));\n  };\n\n  const commentHandlerEnter = (e, item, index) => {\n    if (e.key === 'Enter') {\n      if (e.target.name === 'commentValue') {\n        replyCommentBtn();\n      } else {\n        replyOnCommentBtn(item, index);\n      }\n    }\n  }\n\n  const replyCommentLinkBtn = (index) => {\n    try {\n      let userFeedData = state.userCommentData;\n      userFeedData[index].replyCommentBox = 1;\n      setState((pre) => ({ ...pre, userCommentData: userFeedData }));\n    } catch (er) { console.log(er); };\n  };\n\n  const replySubCommentLinkBtn = (item, index, subItem, sIndex) => {\n    try {\n      let feedComData = state.userCommentData;\n      feedComData[index].reply[sIndex].replySubCommentBox = 1;\n      setState((pre) => ({ ...pre, userCommentData: feedComData }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const replyCommentBtn = async () => {\n    try {\n      let value = state.commentValue;\n      if (!value) { return };\n      let { status, payload } = await POST(\"/feed/add-feed-comment\", { userId: loggedUser._id, feedId: item.id, comment: value });\n      if (status === 0) { return };\n      let commentObjInfo = {\n        createdAt: new Date(),\n        feedTime: moment(new Date()).fromNow(),\n        comment: value,\n        userInfo: {\n          id: loggedUser._id,\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        id: payload._id,\n        reply: []\n      };\n      let allComment = state.userCommentData || [];\n      allComment = [commentObjInfo].concat(allComment);\n      setState((pre) => ({ ...pre, userCommentData: allComment, commentValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n  const replyOnCommentBtn = async (itemRepCom, index) => {\n    try {\n      let value = state.commentReplyValue;\n      if (!value) { return };\n      let replyData = itemRepCom.reply;\n\n      let repCommentObj = {\n        userId: loggedUser._id,\n        feedId: item.id,\n        commentId: itemRepCom.id,\n        comment: value,\n        replyTo: \"Vishwajeet Sharma\"\n      };\n      let { status, payload } = await POST(\"/feed/add-feed-comment\", repCommentObj);\n      if (status === 0) { return };\n\n      let replyObj = {\n        createdAt: new Date(),\n        id: payload._id,\n        feedTime: moment(new Date()).fromNow(),\n        userInfo: {\n          id: loggedUser._id,\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        comment: value\n      };\n      replyData = [replyObj].concat(replyData);\n      let userComm = state.userCommentData;\n      userComm[index].reply = replyData;\n      setState((pre) => ({ ...pre, userCommentData: userComm, commentReplyValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const replyOnCommentReplyBtn = () => {\n    try {\n      let value = state.commentValue;\n      let commentObjInfo = {\n        createdAt: new Date(),\n        comment: value,\n        userInfo: {\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        reply: [{ adf: \"adsf\" }]\n      };\n      let allComment = state.userCommentData || [];\n      allComment.push(commentObjInfo);\n      setState((pre) => ({ ...pre, userCommentData: allComment, commentValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const fetchFeeComment = useCallback(async () => {\n    try {\n      showCommentInput();\n      fetchFeedCommentObj.feedId = item.id;\n      fetchFeedCommentObj.pageNumber = 0;\n      // fetchCommentAPI();\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch Feed Data \", message); };\n      let feedObjData = [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        totalCommentCount: totalPages,\n        userCommentData: feedObjData\n      }));\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchMoreFeedComment = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      fetchFeedCommentObj.pageNumber += 1;\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch More Feed Data \", message); };\n      let feedObjData = state.userCommentData || [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setTimeout(() => {\n        setState((pre) => ({\n          ...pre,\n          totalCommentCount: totalPages,\n          userCommentData: feedObjData\n        }));\n      }, 2);\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchCommentAPI = async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch Feed Comment Data \", message); };\n      let feedObjData = [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        totalCommentCount: totalPages,\n        userCommentData: feedObjData\n      }));\n    } catch (er) { console.log(er); };\n  };\n\n  const showCommentInput = () => {\n    try {\n      setTimeout(() => {\n        setState((pre) => ({ ...pre, commentInput: true }));\n      }, 12);\n    } catch (er) { console.log(er); };\n  };\n\n  const deleteComment = async (itemC, index) => {\n    try {\n      await DELETE('/feed/delete-feed-comment', itemC.id);\n      let userComm = state.userCommentData;\n      let filterCommentData = userComm.filter((item) => {\n        return item.id !== itemC.id\n      });\n      setState((pre) => ({ ...pre, userCommentData: filterCommentData }));\n    } catch (er) { console.log(er); };\n  };\n\n  const deleteCommentReply = async (itemC, sindex, index) => {\n    try {\n      await DELETE('/feed/delete-feed-comment', itemC.id);\n      let replyComment = state.userCommentData;\n      let userComm = replyComment[index].reply;\n      let filterCommentData = userComm.filter((item) => {\n        return item.id !== itemC.id\n      });\n      replyComment[index].reply = filterCommentData;\n      setState((pre) => ({ ...pre, userCommentData: replyComment }));\n    } catch (er) { console.log(er); };\n  };\n\n  /* Feed User Like Include  */\n  const likeDisLikeBtn = async () => {\n    try {\n      let _isLike = 0, _likeCount = parseInt(state.likeCount);\n      if (state.isLike === 1) {\n        _likeCount -= 1;\n      } else {\n        _isLike = 1;\n        _likeCount += 1;\n      };\n      setState((pre) => ({ ...pre, isLike: _isLike, likeCount: _likeCount }));\n      await PATCH('/feed/like-dislike-feed', item.id, { action: _isLike, userId: loggedUser._id });\n    } catch (er) { console.log(er); };\n  };\n\n  const fetchUserLikeList = useCallback(async () => {\n    try {\n      fetchFeedLikeObj.feedId = item?.id;\n      fetchFeedLikeObj.pageNumber = 0;\n      let { status, message, payload } = await POST('/feed/fetch-all-user-likes', fetchFeedLikeObj);\n      if (status === 0) { return console.log(message); };\n      setState((pre) => ({ ...pre, likeData: payload }));\n      setOpen(true);\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchMoreUserLikeList = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLikeLoader: true }));\n      fetchFeedLikeObj.pageNumber += 1;\n      let { status, message, payload } = await POST('/feed/fetch-all-user-likes', fetchFeedLikeObj);\n      setState((pre) => ({ ...pre, isLikeLoader: false }));\n      if (status === 0) { return console.log(\"Fetch More Feed Like Data \", message); };\n      let feedLikeData = state.likeData || [];\n      if (feedLikeData.length > 250) { feedLikeData = []; };\n      feedLikeData.push(...payload);\n      setState((pre) => ({ ...pre, likeData: feedLikeData }));\n    } catch (er) { console.log(er); };\n  });\n  /* Feed User Like Exclude  */\n\n  const followUserBtn = async () => {\n    try {\n      let isStatus = 0;\n      if (state.followLabel === \"Follow\") {\n        isStatus = 1;\n      }\n      let followObj = {\n        \"userId\": loggedUser._id,\n        \"followedUserId\": user.id,\n        \"status\": isStatus\n      };\n      const { status, payload } = await POST('/user/follow-unfollow-user', followObj);\n      if (status === 0) { return };\n      setState((pre) => ({ ...pre, isFollow: 1, followLabel: payload.statusType }));\n    } catch (er) { console.log(er); };\n  };\n\n  const saveRemoveFeedBtn = async () => {\n    try {\n      let isSave = state.isSaved === 1 ? 0 : 1;\n      const saveDelObj = {\n        \"userId\": loggedUser._id,\n        \"feedId\": item.id,\n      };\n      const { status, payload } = await POST('/feed/save-feed-post', saveDelObj);\n      if (payload.deletedCount === 1) { isSave = 0; };\n      if (status === 0) { return };\n      setState((pre) => ({ ...pre, isSaved: isSave }));\n    } catch (er) { console.log(er); };\n  };\n\n  return (\n    <>\n      <Card color=\"blue\" fluid >\n        <Card.Content className=\"post-feed-header\" >\n          <Feed>\n            <Feed.Event>\n              <Feed.Label >\n                {avatar ? <Image src={avatar} /> : <Icon name=\"user\" circular color=\"grey\" />}\n              </Feed.Label>\n              <Feed.Content className=\"head-label\">\n                <Feed.Summary><a>{user.first_name ? user.first_name : \"Profile Name\"}</a></Feed.Summary>\n                <Feed.Meta>\n                  {postTime ? <Feed.Date content={`${moment(new Date(postTime)).fromNow()}`} /> : \"\"}\n                </Feed.Meta>\n              </Feed.Content>\n              <Feed.Extra>\n                {user.id !== loggedUser._id ?\n                  <>\n                    <Button color=\"blue\" basic circular compact onClick={() => followUserBtn()}>\n                      <Icon name={state.followLabel === \"Follow\" ? \"add user\" : \"user delete\"} />   {state.followLabel}\n                    </Button>&nbsp;\n                    <Icon link name={state.isSaved === 0 ? \"bookmark outline\" : \"bookmark\"}\n                      circular color=\"blue\" fitted onClick={() => saveRemoveFeedBtn()}\n                    />&nbsp;\n                    <Dropdown icon=\"ellipsis vertical\" direction=\"left\" as=\"h5\" className=\"dropdown-dots\">\n                      <Dropdown.Menu>\n                        {(dropdownOptions || []).map((option) => (\n                          <Dropdown.Item key={option.value}{...option} />))}\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </>\n                  : null}\n              </Feed.Extra>\n            </Feed.Event>\n          </Feed>\n          <Card.Description style={{ paddingTop: '6px', paddingBottom: '6px' }}>{item.payload}</Card.Description>\n        </Card.Content>\n        <div style={{ background: \"#000\" }}>        {mediaUrls.length > 0 ? <Carousel\n          infiniteLoop\n          useKeyboardArrows\n          autoPlay\n          showThumbs={false}\n          showIndicators={false}\n          className=\"crousel-slider-box\"\n        >\n          {(mediaUrls || []).map((mItem, index) => {\n            let src = mItem.src ? mItem.src : mItem;\n            let thumbUrl = mItem.thumbUrl ? mItem.thumbUrl : mItem;\n            let isVideo = false;\n            let mp4 = src.search(\".mp4\"), mov = src.search(\".mov\"), avi = src.search(\".avi\");\n\n            if (mp4 > 0 || mov > 0 || avi > 0) { isVideo = true };\n            return <React.Fragment key={index}>\n              {isVideo === false ?\n                <div className=\"content-slider\">\n                  <Image src={src} centered className=\"content-container\" />\n                </div>\n                :\n                <div className=\"video-player\">\n                  <ReactPlayer\n                    playing={true}\n                    light={thumbUrl}\n                    url={src}\n                    controls={true}\n                  />\n                </div>\n              }\n            </React.Fragment>\n          })}\n        </Carousel> : <Image src={Assets.defaultPlaceholders.waterMarkSq.img} alt={Assets.defaultPlaceholders.waterMarkSq.alt} centered style={{ height: \"500px\" }} />}\n        </div>\n\n        <Card.Content className=\"post-feed-footer\" >\n          <div className=\"post-feed-footer-icon\">\n            <Header as=\"a\">\n              <Feed.Like>\n                <Card.Content onClick={() => likeDisLikeBtn()}>\n                  {state.isLike === 0 ? <Icon name=\"heart outline\" fitted />\n                    : <Icon name='like' color=\"red\" fitted />\n                  }\n                </Card.Content> &nbsp;\n                <Card.Content onClick={() => fetchUserLikeList()}> {state.likeCount}{\" \"}\n                  {(state.likeCount === 0 || state.likeCount === 1) ? <> Like</> : <>Likes</>}\n                </Card.Content>\n              </Feed.Like>\n            </Header>\n\n            <Header as=\"a\">\n              <Feed.Like onClick={() => fetchFeeComment()}>\n                <Card.Content as=\"a\" >\n                  <Icon name='comment outline' fitted /> {commentCount}\n                </Card.Content> {\" \"}\n                <span>Comment</span>\n              </Feed.Like>\n            </Header>\n\n            <Header as=\"a\">\n              <Feed.Like>\n                <Icon name='share' fitted /> {shareCount} Share\n              </Feed.Like>\n            </Header>\n          </div>\n        </Card.Content>\n\n        {/* {state.commentInput === true ?\n          <Input fluid placeholder='Comment...'\n            value={state.commentValue}\n            name=\"commentValue\"\n            onKeyPress={commentHandlerEnter}\n            onChange={commentHandler}\n            icon={<Icon name='send' inverted circular link onClick={() => replyCommentBtn()} />} />\n          : false}\n\n        {state.userCommentData.length > 0 ?\n          <Card.Content className=\"feed-comment-section\">\n            {state.isLoader === true ? <Loader active inline='centered' /> : \"\"}\n            <Comment.Group>\n              {((state.userCommentData || []).map((item, index) => {\n                return <Comment key={index}>\n                  <Comment.Avatar circular src={makeUserProfileImgURL(item.userInfo.profile_pic)} />\n                  <Comment.Content>\n                    <Comment.Author as='a'>{item.userInfo.first_name}</Comment.Author>\n                    <Comment.Metadata>\n                      <div>{item.feedTime}\n                      </div>\n\n                    </Comment.Metadata>\n                    {loggedUser._id === item.userInfo.id ?\n                      <Icon name='trash' fitted color='red'\n                        style={{ float: 'right', paddingTop: '3px', cursor: 'pointer' }}\n                        onClick={() => deleteComment(item, index)}\n                      />\n                      : \"\"}\n\n                    <Comment.Text>\n                      {item.comment.length > 70 ?\n                        <>\n                          {item.comment.substr(0, 69)}\n                          <Popup\n                            trigger={<Card.Content as=\"a\">... More </Card.Content>}\n                            content={item.comment} basic\n                            position='top center'\n                          />\n                        </>\n                        : <>{item.comment}</>\n                      }\n                    </Comment.Text>\n                    <Comment.Actions>\n                      <Comment.Action onClick={() => replyCommentLinkBtn(index)} as=\"a\">Reply</Comment.Action>\n                      {item.replyCommentBox === 1 ?\n                        <Input placeholder='Reply Comment...'\n                          value={state.commentReplyValue}\n                          name=\"commentReplyValue\"\n                          onKeyPress={(e) => commentHandlerEnter(e, item, index)}\n                          onChange={commentHandler}\n                          icon={<Icon name='send' inverted circular link onClick={() => replyOnCommentBtn(item, index)} />} />\n                        : \"\"}\n                    </Comment.Actions>\n                  </Comment.Content>\n\n                  {item.reply.length ?\n                    <Comment.Group size=\"mini\">\n                      {((item.reply || []).map((subItem, sIndex) => {\n                        return <Comment key={sIndex}>\n                          <Comment.Avatar circular src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\n                          <Comment.Content>\n                            <Comment.Author as='a'>{subItem.userInfo.first_name}</Comment.Author>\n                            <Comment.Metadata>\n                              <div>{subItem.feedTime} &nbsp;&nbsp;&nbsp;\n                                {loggedUser._id === subItem.userInfo.id ?\n                                  <Icon name='trash' fitted color='red' style={{ float: 'right', paddingTop: '0px', cursor: 'pointer' }}\n                                    onClick={() => deleteCommentReply(subItem, sIndex, index)}\n                                  />\n                                  : \"\"}\n                              </div>\n                            </Comment.Metadata>\n                            <Comment.Text>\n                              {subItem.comment}\n\n                            </Comment.Text>\n         \n                          </Comment.Content>\n\n                        </Comment>\n                      }))}\n                    </Comment.Group>\n                    : \"\"}\n                </Comment>\n              }))}\n            </Comment.Group>\n            {state.totalCommentCount > 10 ?\n              <Card.Description as=\"a\" onClick={() => fetchMoreFeedComment()}>\n                View more comment <span style={{ float: 'right' }}>{state.userCommentData.length} of {state.totalCommentCount}</span>\n              </Card.Description>\n              : \"\"}\n          </Card.Content>\n          : \"\"} */}\n      </Card>\n\n      {/* <Modal\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n        open={open}\n        size=\"tiny\"\n      >\n        <Modal.Header>\n          <Header as='h3'>\n            <Icon name=\"heart\" color=\"red\" />\n          </Header>\n        </Modal.Header>\n\n        <Modal.Content scrolling style={{ minHeight: '320px', maxHeight: '440px' }}>\n          <List verticalAlign='middle'>\n            {(state.likeData || []).map((likeItem) => {\n              return <List.Item key={likeItem.id} style={{ marginBottom: '5px' }}>\n                {likeItem.statusType ?\n                  <List.Content floated='right'>\n                    <Button circular basic compact icon labelPosition=\"right\" color=\"blue\" >{likeItem.statusType}<Icon name=\"plus\" /></Button>\n                  </List.Content>\n                  : \"\"}\n                <Image avatar src={makeUserProfileImgURL(likeItem.profilePic)} />\n                <List.Content>\n                  {likeItem.name}\n                  <List.Description>Hello</List.Description>\n                </List.Content>\n              </List.Item>\n            })}\n          </List>\n        </Modal.Content>\n\n        <Modal.Description>\n          {state.likeCount > 10 ?\n            <>\n              <Segment textAlign=\"right\">\n                <span onClick={() => fetchMoreUserLikeList()}\n                  style={{ float: 'left', cursor: 'pointer' }}>View more Likes </span>\n                {state.likeData.length} of {state.likeCount}\n              </Segment>\n            </>\n            : \"\"}\n        </Modal.Description>\n      </Modal> */}\n    </>\n  );\n};\nexport default FeedCard;","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, Placeholder, Icon, Header, Divider, Container, Grid } from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { POST } from \"../../../../Services\";\nimport { getUser, makeUserProfileImgURL, NoData } from \"../../../../utils/common\";\nimport _ from 'lodash'\nimport FeedCard from \"../../../sub-component/postCard/FeedCard\";\n\nlet fetchObj = {\n  \"userId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10,\n  \"statusValue\": \"\",\n  \"filterValue\": \"\",\n  \"search\": \"\",\n  \"sort\": {},\n  \"timeZone\": \"\"\n};\n\nconst defaultObj = {\n  feedRecord: [],\n  totalPage: 0,\n  totalRecord: 0,\n  hashMore: true,\n  totalRecords: 0,\n  isLoader: false\n};\n\nconst SaveFeedPostPage = () => {\n  const [state, setState] = useState(defaultObj);\n  let loggedUser = getUser();\n  fetchObj.userId = loggedUser._id;\n\n  useEffect(() => {\n    try {\n      function callEffect() {\n        fetchFeedData();\n      }; callEffect();\n    } catch (err) { console.log(err); };\n  }, []);\n\n  const fetchFeedData = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, message, totalRecords, payload } = await POST('/feed/fetch-all-save-feeds', fetchObj);\n      setState((pre) => ({ ...pre, isLoader: false }))\n      if (status == 0) {\n        console.log(\"fetchUserData \", message);\n        return setState((pre) => ({ ...pre, hashMore: false }));\n      };\n      let feedObjData = [];\n      feedObjData = state.feedRecord;\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        feedRecord: feedObjData,\n        totalRecords: totalRecords\n      }));\n    } catch (er) { console.log(er); };\n  });\n\n  const nextPage = (i) => {\n    fetchObj.pageNumber = fetchObj.pageNumber + 1;\n    fetchFeedData();\n  };\n\n  return (\n    <>\n      <Container>\n        <Grid centered stackable  >\n          <Grid.Column mobile={16} tablet={8} computer={8} widescreen={6} className=\"\">\n            <Header style={{ paddingTop: '18px' }}>\n              <Icon name=\"bookmark\" color=\"pink\" size=\"tinny\" fitted />\n              &nbsp; Saved Feed List &nbsp;\n              {/* {state.totalRecords} */}\n            </Header>\n            <Divider />\n            {state.feedRecord.length === 0 ?\n              <>\n                {state.hashMore === true ?\n                  <>\n                    {_.times(fetchObj.pageLimit, (i) => (\n                      <Card key={i} fluid>\n                        <Card.Content>\n                          <Placeholder>\n                            <Placeholder.Header image>\n                              <Placeholder.Line length=\" short\" />\n                              <Placeholder.Line length=\"very short\" />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                              <Placeholder.Line />\n                              <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                          </Placeholder>\n                          <Placeholder fluid style={{ height: \"400px\" }}>\n                            <Placeholder.Image rectangular />\n                            <Placeholder.Line length=\" short\" />\n                          </Placeholder>\n                        </Card.Content>\n                      </Card>\n                    ))}\n                  </>\n                  :\n                  <NoData />\n                }\n              </> : null}\n\n            <InfiniteScroll\n              dataLength={state.feedRecord.length}\n              next={nextPage}\n              style={{ padding: \"1px\" }}\n              hasMore={state.hashMore}\n              endMessage={<p style={{ textAlign: 'center' }}><b>No more to show</b></p>}\n              loader={<h4 style={{ textAlign: 'center' }}>Loading...</h4>}\n            >\n              {(state.feedRecord || []).map((item, index) => {\n                return (\n                  <React.Fragment key={index}>\n                    <FeedCard\n                      avatar={makeUserProfileImgURL(item.user_info.profile_pic)}\n                      item={item}\n                      user={item.user_info ? item.user_info : {}}\n                      postTime={item.createdAt}\n                      mediaUrls={item.mediaUrls}\n                      likeCount={item.likeCount}\n                      commentCount={item.commentCount}\n                      shareCount={item.shareCount}\n                    />\n                  </React.Fragment>\n                )\n              })}\n            </InfiniteScroll>\n\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  )\n};\nexport default SaveFeedPostPage;"],"sourceRoot":""}