{"version":3,"sources":["components/sub-component/postCard/FeedCard.js","components/pages/dynamicPages/WallPostFeed/SavedFeedPostPage.js"],"names":["dropdownOptions","key","text","icon","fetchFeedCommentObj","fetchFeedLikeObj","defaultObj","isLoader","isLikeLoader","commentLoader","totalCommentCount","userCommentData","commentInput","commentValue","commentReplyValue","likeCount","isLike","likeData","isFollow","followLabel","isSaved","commentSubReplyValue","FeedCard","avatar","item","user","postTime","mediaUrls","commentCount","shareCount","useState","state","setState","setOpen","loggedUser","getUser","userId","_id","useEffect","_isFollowLabel","pre","isSave","er","console","log","callEffect","fetchFeeComment","useCallback","a","showCommentInput","feedId","id","pageNumber","POST","status","totalPages","message","payload","feedObjData","length","push","setTimeout","likeDisLikeBtn","_isLike","_likeCount","parseInt","PATCH","action","fetchUserLikeList","followUserBtn","feedLikeData","isStatus","followObj","statusType","saveRemoveFeedBtn","saveDelObj","deletedCount","Card","color","fluid","Content","className","Feed","Event","Label","Image","src","Icon","name","circular","Summary","first_name","Meta","Date","content","moment","fromNow","Extra","Button","basic","compact","onClick","link","fitted","Dropdown","direction","as","Menu","map","option","Item","value","Description","style","paddingTop","paddingBottom","background","infiniteLoop","useKeyboardArrows","autoPlay","showThumbs","showIndicators","mItem","index","thumbUrl","isVideo","mp4","search","mov","avi","Fragment","centered","playing","light","url","controls","Assets","defaultPlaceholders","waterMarkSq","img","alt","height","Header","Like","fetchObj","feedRecord","totalPage","totalRecord","hashMore","totalRecords","SaveFeedPostPage","fetchFeedData","err","Container","Grid","stackable","Column","mobile","tablet","computer","widescreen","size","Divider","_","times","pageLimit","i","Placeholder","image","Line","Paragraph","rectangular","dataLength","next","padding","hasMore","endMessage","textAlign","loader","makeUserProfileImgURL","user_info","profile_pic","createdAt"],"mappings":"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","file":"static/js/33.f5c6034c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Carousel } from 'react-responsive-carousel';\nimport moment from \"moment\";\nimport { Image, Feed, Icon, Comment, Button, Card, Header, Dropdown, Modal, Segment, Input, Popup, Loader, List, } from \"semantic-ui-react\";\nimport ReactPlayer from 'react-player';\nimport \"./style.css\";\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\nimport { DELETE, PATCH, POST } from \"../../../Services\";\nimport { getUser, makeUserProfileImgURL } from \"../../../utils/common\";\nimport Assets from \"../../../assets/Assets.js\";\n\nconst dropdownOptions = [\n  { key: \"1\", text: \"Share\", icon: \"share alternate\" },\n  { key: \"3\", text: \"Report\", icon: \"warning sign\" },\n  { key: \"2\", text: \"Block\", icon: \"dont\" }\n];\n\nlet fetchFeedCommentObj = {\n  \"userId\": \"\",\n  \"feedId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10,\n  \"timeZone\": \"\"\n};\n\nlet fetchFeedLikeObj = {\n  \"userId\": \"\",\n  \"feedId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10\n};\n\nlet defaultObj = {\n  isLoader: false,\n  isLikeLoader: true,\n  commentLoader: false,\n  totalCommentCount: 0,\n  userCommentData: [],\n  commentInput: false,\n  commentValue: '',\n  commentReplyValue: '',\n  likeCount: 0,\n  isLike: 0,\n  likeData: [],\n  isFollow: 0,\n  followLabel: \"Follow\",\n  isSaved: 0,\n  commentSubReplyValue: ''\n};\n\n\nconst FeedCard = ({ avatar, item, user, postTime, mediaUrls = [], likeCount, commentCount, shareCount }) => {\n  const [state, setState] = useState(defaultObj);\n  const [open, setOpen] = useState(false);\n\n  let loggedUser = getUser();\n  fetchFeedCommentObj.userId = loggedUser._id;\n  fetchFeedLikeObj.userId = loggedUser._id;\n\n  useEffect(() => {\n    function callEffect() {\n      try {\n        let _isFollowLabel = item.isFollow === 0 ? \"Follow\" : \"Unfollow\"\n        setState((pre) => ({ ...pre, isLike: item.isLike, likeCount: likeCount, followLabel: _isFollowLabel, isSaved: item.isSave }));\n      } catch (er) { console.log(er); };\n    }; callEffect();\n  }, [likeCount])\n\n  const commentHandler = (e) => {\n    let value = e.target.value;\n    let name = e.target.name;\n    setState((pre) => ({\n      ...pre,\n      [name]: value\n    }));\n  };\n\n  const commentHandlerEnter = (e, item, index) => {\n    if (e.key === 'Enter') {\n      if (e.target.name === 'commentValue') {\n        replyCommentBtn();\n      } else {\n        replyOnCommentBtn(item, index);\n      }\n    }\n  }\n\n  const replyCommentLinkBtn = (index) => {\n    try {\n      let userFeedData = state.userCommentData;\n      userFeedData[index].replyCommentBox = 1;\n      setState((pre) => ({ ...pre, userCommentData: userFeedData }));\n    } catch (er) { console.log(er); };\n  };\n\n  const replySubCommentLinkBtn = (item, index, subItem, sIndex) => {\n    try {\n      let feedComData = state.userCommentData;\n      feedComData[index].reply[sIndex].replySubCommentBox = 1;\n      setState((pre) => ({ ...pre, userCommentData: feedComData }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const replyCommentBtn = async () => {\n    try {\n      let value = state.commentValue;\n      if (!value) { return };\n      let { status, payload } = await POST(\"/feed/add-feed-comment\", { userId: loggedUser._id, feedId: item.id, comment: value });\n      if (status === 0) { return };\n      let commentObjInfo = {\n        createdAt: new Date(),\n        feedTime: moment(new Date()).fromNow(),\n        comment: value,\n        userInfo: {\n          id: loggedUser._id,\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        id: payload._id,\n        reply: []\n      };\n      let allComment = state.userCommentData || [];\n      allComment = [commentObjInfo].concat(allComment);\n      setState((pre) => ({ ...pre, userCommentData: allComment, commentValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n  const replyOnCommentBtn = async (itemRepCom, index) => {\n    try {\n      let value = state.commentReplyValue;\n      if (!value) { return };\n      let replyData = itemRepCom.reply;\n\n      let repCommentObj = {\n        userId: loggedUser._id,\n        feedId: item.id,\n        commentId: itemRepCom.id,\n        comment: value,\n        replyTo: \"Vishwajeet Sharma\"\n      };\n      let { status, payload } = await POST(\"/feed/add-feed-comment\", repCommentObj);\n      if (status === 0) { return };\n\n      let replyObj = {\n        createdAt: new Date(),\n        id: payload._id,\n        feedTime: moment(new Date()).fromNow(),\n        userInfo: {\n          id: loggedUser._id,\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        comment: value\n      };\n      replyData = [replyObj].concat(replyData);\n      let userComm = state.userCommentData;\n      userComm[index].reply = replyData;\n      setState((pre) => ({ ...pre, userCommentData: userComm, commentReplyValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const replyOnCommentReplyBtn = () => {\n    try {\n      let value = state.commentValue;\n      let commentObjInfo = {\n        createdAt: new Date(),\n        comment: value,\n        userInfo: {\n          first_name: loggedUser.Name,\n          profile_pic: '',\n        },\n        reply: [{ adf: \"adsf\" }]\n      };\n      let allComment = state.userCommentData || [];\n      allComment.push(commentObjInfo);\n      setState((pre) => ({ ...pre, userCommentData: allComment, commentValue: '' }));\n    } catch (er) { console.log(er); };\n  };\n\n\n  const fetchFeeComment = useCallback(async () => {\n    try {\n      showCommentInput();\n      fetchFeedCommentObj.feedId = item.id;\n      fetchFeedCommentObj.pageNumber = 0;\n      // fetchCommentAPI();\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch Feed Data \", message); };\n      let feedObjData = [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        totalCommentCount: totalPages,\n        userCommentData: feedObjData\n      }));\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchMoreFeedComment = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      fetchFeedCommentObj.pageNumber += 1;\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch More Feed Data \", message); };\n      let feedObjData = state.userCommentData || [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setTimeout(() => {\n        setState((pre) => ({\n          ...pre,\n          totalCommentCount: totalPages,\n          userCommentData: feedObjData\n        }));\n      }, 2);\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchCommentAPI = async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, totalPages, message, payload } = await POST('/feed/fetch-all-feed-comment', fetchFeedCommentObj);\n      setState((pre) => ({ ...pre, isLoader: false }));\n      if (status === 0) { return console.log(\"Fetch Feed Comment Data \", message); };\n      let feedObjData = [];\n      if (feedObjData.length > 250) { feedObjData = []; };\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        totalCommentCount: totalPages,\n        userCommentData: feedObjData\n      }));\n    } catch (er) { console.log(er); };\n  };\n\n  const showCommentInput = () => {\n    try {\n      setTimeout(() => {\n        setState((pre) => ({ ...pre, commentInput: true }));\n      }, 12);\n    } catch (er) { console.log(er); };\n  };\n\n  const deleteComment = async (itemC, index) => {\n    try {\n      await DELETE('/feed/delete-feed-comment', itemC.id);\n      let userComm = state.userCommentData;\n      let filterCommentData = userComm.filter((item) => {\n        return item.id !== itemC.id\n      });\n      setState((pre) => ({ ...pre, userCommentData: filterCommentData }));\n    } catch (er) { console.log(er); };\n  };\n\n  const deleteCommentReply = async (itemC, sindex, index) => {\n    try {\n      await DELETE('/feed/delete-feed-comment', itemC.id);\n      let replyComment = state.userCommentData;\n      let userComm = replyComment[index].reply;\n      let filterCommentData = userComm.filter((item) => {\n        return item.id !== itemC.id\n      });\n      replyComment[index].reply = filterCommentData;\n      setState((pre) => ({ ...pre, userCommentData: replyComment }));\n    } catch (er) { console.log(er); };\n  };\n\n  /* Feed User Like Include  */\n  const likeDisLikeBtn = async () => {\n    try {\n      let _isLike = 0, _likeCount = parseInt(state.likeCount);\n      if (state.isLike === 1) {\n        _likeCount -= 1;\n      } else {\n        _isLike = 1;\n        _likeCount += 1;\n      };\n      setState((pre) => ({ ...pre, isLike: _isLike, likeCount: _likeCount }));\n      await PATCH('/feed/like-dislike-feed', item.id, { action: _isLike, userId: loggedUser._id });\n    } catch (er) { console.log(er); };\n  };\n\n  const fetchUserLikeList = useCallback(async () => {\n    try {\n      fetchFeedLikeObj.feedId = item?.id;\n      fetchFeedLikeObj.pageNumber = 0;\n      let { status, message, payload } = await POST('/feed/fetch-all-user-likes', fetchFeedLikeObj);\n      if (status === 0) { return console.log(message); };\n      setState((pre) => ({ ...pre, likeData: payload }));\n      setOpen(true);\n    } catch (er) { console.log(er); };\n  });\n\n  const fetchMoreUserLikeList = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLikeLoader: true }));\n      fetchFeedLikeObj.pageNumber += 1;\n      let { status, message, payload } = await POST('/feed/fetch-all-user-likes', fetchFeedLikeObj);\n      setState((pre) => ({ ...pre, isLikeLoader: false }));\n      if (status === 0) { return console.log(\"Fetch More Feed Like Data \", message); };\n      let feedLikeData = state.likeData || [];\n      if (feedLikeData.length > 250) { feedLikeData = []; };\n      feedLikeData.push(...payload);\n      setState((pre) => ({ ...pre, likeData: feedLikeData }));\n    } catch (er) { console.log(er); };\n  });\n  /* Feed User Like Exclude  */\n\n  const followUserBtn = async () => {\n    try {\n      let isStatus = 0;\n      if (state.followLabel === \"Follow\") {\n        isStatus = 1;\n      }\n      let followObj = {\n        \"userId\": loggedUser._id,\n        \"followedUserId\": user.id,\n        \"status\": isStatus\n      };\n      const { status, payload } = await POST('/user/follow-unfollow-user', followObj);\n      if (status === 0) { return };\n      setState((pre) => ({ ...pre, isFollow: 1, followLabel: payload.statusType }));\n    } catch (er) { console.log(er); };\n  };\n\n  const saveRemoveFeedBtn = async () => {\n    try {\n      let isSave = state.isSaved === 1 ? 0 : 1;\n      const saveDelObj = {\n        \"userId\": loggedUser._id,\n        \"feedId\": item.id,\n      };\n      const { status, payload } = await POST('/feed/save-feed-post', saveDelObj);\n      if (payload.deletedCount === 1) { isSave = 0; };\n      if (status === 0) { return };\n      setState((pre) => ({ ...pre, isSaved: isSave }));\n    } catch (er) { console.log(er); };\n  };\n\n  return (\n    <>\n      <Card color=\"blue\" fluid >\n        <Card.Content className=\"post-feed-header\" >\n          <Feed>\n            <Feed.Event>\n              <Feed.Label >\n                {avatar ? <Image src={avatar} /> : <Icon name=\"user\" circular color=\"grey\" />}\n              </Feed.Label>\n              <Feed.Content className=\"head-label\">\n                <Feed.Summary><a>{user.first_name ? user.first_name : \"Profile Name\"}</a></Feed.Summary>\n                <Feed.Meta>\n                  {postTime ? <Feed.Date content={`${moment(new Date(postTime)).fromNow()}`} /> : \"\"}\n                </Feed.Meta>\n              </Feed.Content>\n              <Feed.Extra>\n                {user.id !== loggedUser._id ?\n                  <>\n                    <Button color=\"blue\" basic circular compact onClick={() => followUserBtn()}>\n                      <Icon name={state.followLabel === \"Follow\" ? \"add user\" : \"user delete\"} />   {state.followLabel}\n                    </Button>&nbsp;\n                    <Icon link name={state.isSaved === 0 ? \"bookmark outline\" : \"bookmark\"}\n                      circular color=\"blue\" fitted onClick={() => saveRemoveFeedBtn()}\n                    />&nbsp;\n                    <Dropdown icon=\"ellipsis vertical\" direction=\"left\" as=\"h5\" className=\"dropdown-dots\">\n                      <Dropdown.Menu>\n                        {(dropdownOptions || []).map((option) => (\n                          <Dropdown.Item key={option.value}{...option} />))}\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </>\n                  : null}\n              </Feed.Extra>\n            </Feed.Event>\n          </Feed>\n          <Card.Description style={{ paddingTop: '6px', paddingBottom: '6px' }}>{item.payload}</Card.Description>\n        </Card.Content>\n        <div style={{ background: \"#000\" }}>        {mediaUrls.length > 0 ? <Carousel\n          infiniteLoop\n          useKeyboardArrows\n          autoPlay\n          showThumbs={false}\n          showIndicators={false}\n          className=\"crousel-slider-box\"\n        >\n          {(mediaUrls || []).map((mItem, index) => {\n            let src = mItem.src ? mItem.src : mItem;\n            let thumbUrl = mItem.thumbUrl ? mItem.thumbUrl : mItem;\n            let isVideo = false;\n            let mp4 = src.search(\".mp4\"), mov = src.search(\".mov\"), avi = src.search(\".avi\");\n\n            if (mp4 > 0 || mov > 0 || avi > 0) { isVideo = true };\n            return <React.Fragment key={index}>\n              {isVideo === false ?\n                <div className=\"content-slider\">\n                  <Image src={src} centered className=\"content-container\" />\n                </div>\n                :\n                <div className=\"video-player\">\n                  <ReactPlayer\n                    playing={true}\n                    light={thumbUrl}\n                    url={src}\n                    controls={true}\n                  />\n                </div>\n              }\n            </React.Fragment>\n          })}\n        </Carousel> : <Image src={Assets.defaultPlaceholders.waterMarkSq.img} alt={Assets.defaultPlaceholders.waterMarkSq.alt} centered style={{ height: \"500px\" }} />}\n        </div>\n\n        <Card.Content className=\"post-feed-footer\" >\n          <div className=\"post-feed-footer-icon\">\n            <Header as=\"a\">\n              <Feed.Like>\n                <Card.Content onClick={() => likeDisLikeBtn()}>\n                  {state.isLike === 0 ? <Icon name=\"heart outline\" fitted />\n                    : <Icon name='like' color=\"red\" fitted />\n                  }\n                </Card.Content> &nbsp;\n                <Card.Content onClick={() => fetchUserLikeList()}> {state.likeCount}{\" \"}\n                  {(state.likeCount === 0 || state.likeCount === 1) ? <> Like</> : <>Likes</>}\n                </Card.Content>\n              </Feed.Like>\n            </Header>\n\n            <Header as=\"a\">\n              <Feed.Like onClick={() => fetchFeeComment()}>\n                <Card.Content as=\"a\" >\n                  <Icon name='comment outline' fitted /> {commentCount}\n                </Card.Content> {\" \"}\n                <span>Comment</span>\n              </Feed.Like>\n            </Header>\n\n            <Header as=\"a\">\n              <Feed.Like>\n                <Icon name='share' fitted /> {shareCount} Share\n              </Feed.Like>\n            </Header>\n          </div>\n        </Card.Content>\n\n        {/* {state.commentInput === true ?\n          <Input fluid placeholder='Comment...'\n            value={state.commentValue}\n            name=\"commentValue\"\n            onKeyPress={commentHandlerEnter}\n            onChange={commentHandler}\n            icon={<Icon name='send' inverted circular link onClick={() => replyCommentBtn()} />} />\n          : false}\n\n        {state.userCommentData.length > 0 ?\n          <Card.Content className=\"feed-comment-section\">\n            {state.isLoader === true ? <Loader active inline='centered' /> : \"\"}\n            <Comment.Group>\n              {((state.userCommentData || []).map((item, index) => {\n                return <Comment key={index}>\n                  <Comment.Avatar circular src={makeUserProfileImgURL(item.userInfo.profile_pic)} />\n                  <Comment.Content>\n                    <Comment.Author as='a'>{item.userInfo.first_name}</Comment.Author>\n                    <Comment.Metadata>\n                      <div>{item.feedTime}\n                      </div>\n\n                    </Comment.Metadata>\n                    {loggedUser._id === item.userInfo.id ?\n                      <Icon name='trash' fitted color='red'\n                        style={{ float: 'right', paddingTop: '3px', cursor: 'pointer' }}\n                        onClick={() => deleteComment(item, index)}\n                      />\n                      : \"\"}\n\n                    <Comment.Text>\n                      {item.comment.length > 70 ?\n                        <>\n                          {item.comment.substr(0, 69)}\n                          <Popup\n                            trigger={<Card.Content as=\"a\">... More </Card.Content>}\n                            content={item.comment} basic\n                            position='top center'\n                          />\n                        </>\n                        : <>{item.comment}</>\n                      }\n                    </Comment.Text>\n                    <Comment.Actions>\n                      <Comment.Action onClick={() => replyCommentLinkBtn(index)} as=\"a\">Reply</Comment.Action>\n                      {item.replyCommentBox === 1 ?\n                        <Input placeholder='Reply Comment...'\n                          value={state.commentReplyValue}\n                          name=\"commentReplyValue\"\n                          onKeyPress={(e) => commentHandlerEnter(e, item, index)}\n                          onChange={commentHandler}\n                          icon={<Icon name='send' inverted circular link onClick={() => replyOnCommentBtn(item, index)} />} />\n                        : \"\"}\n                    </Comment.Actions>\n                  </Comment.Content>\n\n                  {item.reply.length ?\n                    <Comment.Group size=\"mini\">\n                      {((item.reply || []).map((subItem, sIndex) => {\n                        return <Comment key={sIndex}>\n                          <Comment.Avatar circular src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\n                          <Comment.Content>\n                            <Comment.Author as='a'>{subItem.userInfo.first_name}</Comment.Author>\n                            <Comment.Metadata>\n                              <div>{subItem.feedTime} &nbsp;&nbsp;&nbsp;\n                                {loggedUser._id === subItem.userInfo.id ?\n                                  <Icon name='trash' fitted color='red' style={{ float: 'right', paddingTop: '0px', cursor: 'pointer' }}\n                                    onClick={() => deleteCommentReply(subItem, sIndex, index)}\n                                  />\n                                  : \"\"}\n                              </div>\n                            </Comment.Metadata>\n                            <Comment.Text>\n                              {subItem.comment}\n\n                            </Comment.Text>\n         \n                          </Comment.Content>\n\n                        </Comment>\n                      }))}\n                    </Comment.Group>\n                    : \"\"}\n                </Comment>\n              }))}\n            </Comment.Group>\n            {state.totalCommentCount > 10 ?\n              <Card.Description as=\"a\" onClick={() => fetchMoreFeedComment()}>\n                View more comment <span style={{ float: 'right' }}>{state.userCommentData.length} of {state.totalCommentCount}</span>\n              </Card.Description>\n              : \"\"}\n          </Card.Content>\n          : \"\"} */}\n      </Card>\n\n      {/* <Modal\n        onOpen={() => setOpen(true)}\n        onClose={() => setOpen(false)}\n        open={open}\n        size=\"tiny\"\n      >\n        <Modal.Header>\n          <Header as='h3'>\n            <Icon name=\"heart\" color=\"red\" />\n          </Header>\n        </Modal.Header>\n\n        <Modal.Content scrolling style={{ minHeight: '320px', maxHeight: '440px' }}>\n          <List verticalAlign='middle'>\n            {(state.likeData || []).map((likeItem) => {\n              return <List.Item key={likeItem.id} style={{ marginBottom: '5px' }}>\n                {likeItem.statusType ?\n                  <List.Content floated='right'>\n                    <Button circular basic compact icon labelPosition=\"right\" color=\"blue\" >{likeItem.statusType}<Icon name=\"plus\" /></Button>\n                  </List.Content>\n                  : \"\"}\n                <Image avatar src={makeUserProfileImgURL(likeItem.profilePic)} />\n                <List.Content>\n                  {likeItem.name}\n                  <List.Description>Hello</List.Description>\n                </List.Content>\n              </List.Item>\n            })}\n          </List>\n        </Modal.Content>\n\n        <Modal.Description>\n          {state.likeCount > 10 ?\n            <>\n              <Segment textAlign=\"right\">\n                <span onClick={() => fetchMoreUserLikeList()}\n                  style={{ float: 'left', cursor: 'pointer' }}>View more Likes </span>\n                {state.likeData.length} of {state.likeCount}\n              </Segment>\n            </>\n            : \"\"}\n        </Modal.Description>\n      </Modal> */}\n    </>\n  );\n};\nexport default FeedCard;","import React, { useState, useEffect, useCallback } from \"react\";\nimport { Card, Placeholder, Icon, Header, Divider, Container, Grid } from \"semantic-ui-react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { POST } from \"../../../../Services\";\nimport { getUser, makeUserProfileImgURL, NoData } from \"../../../../utils/common\";\nimport _ from 'lodash'\nimport FeedCard from \"../../../sub-component/postCard/FeedCard\";\n\nlet fetchObj = {\n  \"userId\": \"\",\n  \"pageNumber\": 0,\n  \"pageLimit\": 10,\n  \"statusValue\": \"\",\n  \"filterValue\": \"\",\n  \"search\": \"\",\n  \"sort\": {},\n  \"timeZone\": \"\"\n};\n\nconst defaultObj = {\n  feedRecord: [],\n  totalPage: 0,\n  totalRecord: 0,\n  hashMore: true,\n  totalRecords: 0,\n  isLoader: false\n};\n\nconst SaveFeedPostPage = () => {\n  const [state, setState] = useState(defaultObj);\n  let loggedUser = getUser();\n  fetchObj.userId = loggedUser._id;\n\n  useEffect(() => {\n    try {\n      function callEffect() {\n        fetchFeedData();\n      }; callEffect();\n    } catch (err) { console.log(err); };\n  }, []);\n\n  const fetchFeedData = useCallback(async () => {\n    try {\n      setState((pre) => ({ ...pre, isLoader: true }));\n      let { status, message, totalRecords, payload } = await POST('/feed/fetch-all-save-feeds', fetchObj);\n      setState((pre) => ({ ...pre, isLoader: false }))\n      if (status == 0) {\n        console.log(\"fetchUserData \", message);\n        return setState((pre) => ({ ...pre, hashMore: false }));\n      };\n      let feedObjData = [];\n      feedObjData = state.feedRecord;\n      feedObjData.push(...payload);\n      setState((pre) => ({\n        ...pre,\n        feedRecord: feedObjData,\n        totalRecords: totalRecords\n      }));\n    } catch (er) { console.log(er); };\n  });\n\n  const nextPage = (i) => {\n    fetchObj.pageNumber = fetchObj.pageNumber + 1;\n    fetchFeedData();\n  };\n\n  return (\n    <>\n      <Container>\n        <Grid centered stackable  >\n          <Grid.Column mobile={16} tablet={8} computer={8} widescreen={6} className=\"\">\n            <Header style={{ paddingTop: '18px' }}>\n              <Icon name=\"bookmark\" color=\"pink\" size=\"tinny\" fitted />\n              &nbsp; Saved Feed List &nbsp;\n              {/* {state.totalRecords} */}\n            </Header>\n            <Divider />\n            {state.feedRecord.length === 0 ?\n              <>\n                {state.hashMore === true ?\n                  <>\n                    {_.times(fetchObj.pageLimit, (i) => (\n                      <Card key={i} fluid>\n                        <Card.Content>\n                          <Placeholder>\n                            <Placeholder.Header image>\n                              <Placeholder.Line length=\" short\" />\n                              <Placeholder.Line length=\"very short\" />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                              <Placeholder.Line />\n                              <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                          </Placeholder>\n                          <Placeholder fluid style={{ height: \"400px\" }}>\n                            <Placeholder.Image rectangular />\n                            <Placeholder.Line length=\" short\" />\n                          </Placeholder>\n                        </Card.Content>\n                      </Card>\n                    ))}\n                  </>\n                  :\n                  <NoData />\n                }\n              </> : null}\n\n            <InfiniteScroll\n              dataLength={state.feedRecord.length}\n              next={nextPage}\n              style={{ padding: \"1px\" }}\n              hasMore={state.hashMore}\n              endMessage={<p style={{ textAlign: 'center' }}><b>No more to show</b></p>}\n              loader={<h4 style={{ textAlign: 'center' }}>Loading...</h4>}\n            >\n              {(state.feedRecord || []).map((item, index) => {\n                return (\n                  <React.Fragment key={index}>\n                    <FeedCard\n                      avatar={makeUserProfileImgURL(item.user_info.profile_pic)}\n                      item={item}\n                      user={item.user_info ? item.user_info : {}}\n                      postTime={item.createdAt}\n                      mediaUrls={item.mediaUrls}\n                      likeCount={item.likeCount}\n                      commentCount={item.commentCount}\n                      shareCount={item.shareCount}\n                    />\n                  </React.Fragment>\n                )\n              })}\n            </InfiniteScroll>\n\n          </Grid.Column>\n        </Grid>\n      </Container>\n    </>\n  )\n};\nexport default SaveFeedPostPage;"],"sourceRoot":""}